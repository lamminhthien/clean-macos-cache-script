name: Build DMG Package

# Manual trigger with approval required
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install DMG creation tools
        run: |
          npm install -g pkg
          brew install create-dmg

      - name: Create standalone executable with pkg
        run: |
          # Create output directory
          mkdir -p dist/app

          # Build executable for macOS
          pkg package.json \
            --targets node18-macos-x64 \
            --output dist/app/macos-cache-cleaner

          # Make it executable
          chmod +x dist/app/macos-cache-cleaner

      - name: Create application bundle structure
        run: |
          # Create macOS app bundle structure
          mkdir -p "dist/macOS Cache Cleaner.app/Contents/MacOS"
          mkdir -p "dist/macOS Cache Cleaner.app/Contents/Resources"

          # Move executable to app bundle
          mv dist/app/macos-cache-cleaner "dist/macOS Cache Cleaner.app/Contents/MacOS/"

          # Create Info.plist
          cat > "dist/macOS Cache Cleaner.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>macos-cache-cleaner</string>
              <key>CFBundleIdentifier</key>
              <string>com.github.macos-cache-cleaner</string>
              <key>CFBundleName</key>
              <string>macOS Cache Cleaner</string>
              <key>CFBundleVersion</key>
              <string>${{ github.event.inputs.version }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.event.inputs.version }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Create launcher script
        run: |
          # Create a launcher script that opens Terminal and runs the tool
          cat > "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner" << 'EOF'
          #!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

          # Open Terminal and run the executable
          osascript <<APPLESCRIPT
          tell application "Terminal"
              activate
              do script "cd '$DIR' && ./macos-cache-cleaner-bin; exit"
          end tell
          APPLESCRIPT
          EOF

          # Rename the actual executable
          mv "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner" \
             "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner-bin"

          # Move launcher script to correct location
          mv "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner" \
             "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner"

          # Make launcher executable
          chmod +x "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner"
          chmod +x "dist/macOS Cache Cleaner.app/Contents/MacOS/macos-cache-cleaner-bin"

      - name: Create DMG
        run: |
          # Create DMG with create-dmg
          create-dmg \
            --volname "macOS Cache Cleaner" \
            --volicon "dist/macOS Cache Cleaner.app/Contents/Resources/AppIcon.icns" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "macOS Cache Cleaner.app" 175 120 \
            --hide-extension "macOS Cache Cleaner.app" \
            --app-drop-link 425 120 \
            "dist/macOS-Cache-Cleaner-${{ github.event.inputs.version }}.dmg" \
            "dist/macOS Cache Cleaner.app" \
            || true

          # If create-dmg fails (it often does but still creates the DMG), use hdiutil as backup
          if [ ! -f "dist/macOS-Cache-Cleaner-${{ github.event.inputs.version }}.dmg" ]; then
            hdiutil create -volname "macOS Cache Cleaner" \
              -srcfolder "dist/macOS Cache Cleaner.app" \
              -ov -format UDZO \
              "dist/macOS-Cache-Cleaner-${{ github.event.inputs.version }}.dmg"
          fi

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-cache-cleaner-v${{ github.event.inputs.version }}-dmg
          path: dist/*.dmg
          retention-days: 90

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: macOS Cache Cleaner v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: dist/*.dmg
          body: |
            # macOS Cache Cleaner v${{ github.event.inputs.version }}

            ## Installation

            1. Download the DMG file below
            2. Open the DMG file
            3. Drag "macOS Cache Cleaner.app" to your Applications folder
            4. Open Terminal and run the app, or double-click to launch

            ## What's Included

            An interactive terminal tool to clean cache directories and free up disk space on macOS.

            ## Requirements

            - macOS 10.13 or later

            ## Features

            - Interactive UI with colors and progress bars
            - Shows cache sizes before cleaning
            - Select which caches to clean
            - Automatic sudo handling when needed
            - Smart warnings for important caches

            ## Note

            On first run, you may need to allow the app in System Preferences > Security & Privacy.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
